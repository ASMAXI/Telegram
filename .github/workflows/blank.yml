# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the beta branch
  push:
    branches: [ beta ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-11.0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      # Runs a single command using the runners shell
      - name: Install Bazelisk
        run: brew install bazelisk

      - name: Rename Xcode folder
        run: cd /Applications && sudo mv Xcode.app Xcode-old.app && sudo mv Xcode_12.2.app Xcode.app

      - name: Set active Xcode path
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Create canonical user home directory
        run: sudo mkdir /Users/telegram

      - name: Prepare canonical user home directory permissions
        run: sudo chown -R $(whoami) /Users/telegram

      - name: Move source code to the canonical directory
        run: |
          set -x
          cp -R $GITHUB_WORKSPACE /Users/telegram/
          mv /Users/telegram/$(basename $GITHUB_WORKSPACE) /Users/telegram/telegram-ios
          ls -la /Users/telegram/telegram-ios

      - name: Build the App
        run: |
          set -x
          echo "default-keychain=$(security default-keychain)"
          cd /Users/telegram/telegram-ios
          export COMMIT_COUNT=$(git rev-list --count HEAD)
          export COMMIT_COUNT="$(($COMMIT_COUNT+2000))"
          export BUILD_NUMBER="$COMMIT_COUNT"
          export MY_KEYCHAIN="temp.keychain"
          export MY_KEYCHAIN_PASSWORD="secret"
          security create-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          security list-keychains -d user -s "$MY_KEYCHAIN" $(security list-keychains -d user | sed s/\"//g)
          security set-keychain-settings "$MY_KEYCHAIN"
          security default-keychain -s "$MY_KEYCHAIN"
          security unlock-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          echo "default-keychain now=$(security default-keychain)"
          mkdir /Users/telegram/telegram-ios/codesigning_data
          export USE_BAZEL_VERSION=3.7.0
          export BUILD_ENV_SCRIPT="build-system/verify.sh"
          export APP_TARGET="bazel_app"
          export CODESIGNING_DATA_PATH="build-system/fake-codesigning"
          export CODESIGNING_CERTS_VARIANT="distribution"
          export CODESIGNING_PROFILES_VARIANT="appstore"
          export CERTS_PATH="build-system/fake-codesigning/certs/distribution"
          export PROFILES_PATH="build-system/fake-codesigning/profiles"
          for f in "$CERTS_PATH"/*.p12; do
            security import "$f" -k "$MY_KEYCHAIN" -P "" -T /usr/bin/codesign -T /usr/bin/security
          done
          for f in "$CERTS_PATH"/*.cer; do
            sudo security add-trusted-cert -d -r trustRoot -p codeSign -k "$MY_KEYCHAIN" "$f"
          done
          PATH="$PATH:$(pwd)/tools" LOCAL_CODESIGNING=1 sh "$BUILD_ENV_SCRIPT" make "$APP_TARGET"
