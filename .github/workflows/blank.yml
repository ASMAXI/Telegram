name: CI

on:
  push:
    branches: [ beta ]

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-11.0

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      # Runs a single command using the runners shell
      - name: Install Bazelisk
        run: brew install bazelisk

      - name: Set active Xcode path
        run: sudo xcode-select -s /Applications/Xcode_12.2.app/Contents/Developer

      - name: Build the App
        run: |
          set -x
          cd $GITHUB_WORKSPACE
          export COMMIT_COUNT=$(git rev-list --count HEAD)
          export COMMIT_COUNT="$(($COMMIT_COUNT+2000))"
          export BUILD_NUMBER="$COMMIT_COUNT"
          export MY_KEYCHAIN="temp.keychain"
          export MY_KEYCHAIN_PASSWORD="secret"
          security create-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          security list-keychains -d user -s "$MY_KEYCHAIN" $(security list-keychains -d user | sed s/\"//g)
          security set-keychain-settings "$MY_KEYCHAIN"
          security unlock-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          mkdir $GITHUB_WORKSPACE/codesigning_data
          export USE_BAZEL_VERSION=3.7.0
          export BUILD_ENV_SCRIPT="build-system/verify.sh"
          export APP_TARGET="bazel_app"
          export CODESIGNING_DATA_PATH="build-system/fake-codesigning"
          export CODESIGNING_CERTS_VARIANT="distribution"
          export CODESIGNING_PROFILES_VARIANT="appstore"
          export CERTS_PATH="build-system/fake-codesigning/certs/distribution"
          export PROFILES_PATH="build-system/fake-codesigning/profiles"
          for f in "$CERTS_PATH"/*.p12; do
            security import "$f" -k "$MY_KEYCHAIN" -P "" -T /usr/bin/codesign -T /usr/bin/security
          done
          for f in "$CERTS_PATH"/*.cer; do
            sudo security add-trusted-cert -d -r trustRoot -p codeSign -k "$MY_KEYCHAIN" "$f"
          done
          security set-key-partition-list -S apple-tool:,apple: -k "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          PATH="$PATH:$(pwd)/tools" LOCAL_CODESIGNING=1 sh "$BUILD_ENV_SCRIPT" make "$APP_TARGET"
          OUTPUT_PATH="build/artifacts"
          rm -rf "$OUTPUT_PATH"
          mkdir -p "$OUTPUT_PATH"
          for f in bazel-out/applebin_ios-ios_arm*-opt-ST-*/bin/Telegram/Telegram.ipa; do
            cp "$f" $OUTPUT_PATH/
          done
          mkdir -p build/DSYMs
          for f in bazel-out/applebin_ios-ios_arm*-opt-ST-*/bin/Telegram/*.dSYM; do
            cp -R "$f" build/DSYMs/
          done
          zip -r "./$OUTPUT_PATH/Telegram.DSYMs.zip" build/DSYMs 1>/dev/null

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}$-{{ github.run_id }}
          release_name: Release ${{ github.ref }}-${{ github.run_id }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: $GITHUB_WORKSPACE/build/artifacts/Telegram.ipa
          asset_name: Telegram.ipa
          asset_content_type: application/zip
